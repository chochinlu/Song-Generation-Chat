/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/NYDyUGoHDaq
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client'

import { useState, useRef, useEffect } from 'react';
import { ChatMessage } from './ChatMessage';
import { ChatInput } from './ChatInput';
import Markdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { AttachmentIcon, CloseIcon, MenuIcon } from './Icons';
import { Button } from "@/components/ui/button"
import React from 'react';

interface Message {
  role: 'user' | 'assistant';
  content: string;
  imageUrl?: string;
  videoUrl?: string;
}

export function Chat() {
  const [messages, setMessages] = useState<Message[]>([
    { role: 'assistant', content: 'Hello! How can I assist you today?' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isThinking, setIsThinking] = useState(false);
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [videoUrl, setVideoUrl] = useState<string | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [reminderMessage, setReminderMessage] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);

  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB in bytes

  const handleFileAttachment = () => {
    if (!imageUrl) {
      fileInputRef.current?.click();
    }
  }

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > MAX_FILE_SIZE) {
        setReminderMessage('File size cannot exceed 5MB.');
        return;
      }
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onloadend = () => {
          setImageUrl(reader.result as string);
          setReminderMessage(null); // Clear reminder message
        };
        reader.readAsDataURL(file);
      } else {
        setReminderMessage('Please upload only image files.');
      }
    }
    // If the file is not an image, we don't perform any action and don't display a warning
  }

  const handleRemoveImage = () => {
    setImageUrl(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  }

  const handleSendMessage = async () => {
    if (!inputMessage.trim() && !imageUrl) return;

    setReminderMessage(null); // Clear reminder message

    const newMessage: Message = {
      role: 'user',
      content: inputMessage,
      imageUrl: imageUrl || undefined
    };

    setMessages(prev => [...prev, newMessage]);
    setInputMessage('');
    setIsThinking(true);

    // console.log('Sending message with imageUrl:', imageUrl ? imageUrl.substring(0, 50) + '...' : 'undefined');

    try {
      const formData = new FormData();
      formData.append('user_id', 'test');
      formData.append('session_id', 'test');
      formData.append('chat_data', JSON.stringify({ messages: [...messages, newMessage], imageUrl }));

      const response = await fetch('http://localhost:8000/api/v1/chat', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('API request failed');
      }

      const reader = response.body?.getReader();
      if (!reader) {
        throw new Error('Failed to get response reader');
      }

      let aiResponse = '';
      setIsThinking(false);
      setMessages(prev => [...prev, { role: 'assistant', content: '' }]);

      while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const text = new TextDecoder().decode(value);
        aiResponse += text;

        setMessages(prev => {
          const newMessages = [...prev];
          newMessages[newMessages.length - 1].content = aiResponse;
          return newMessages;
        });
      }
    } catch (error) {
      console.error('Error sending message:', error);
      setMessages(prev => [...prev, { role: 'assistant', content: 'Sorry, an error occurred.' }]);
    } finally {
      setIsThinking(false);
      setImageUrl(null);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {
    if (e.key === 'Enter') {
      if (e.ctrlKey) {
        setInputMessage(prev => prev + '\n');
      } else if (!e.shiftKey) {
        e.preventDefault();
        handleSendMessage();
      }
    }
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };


  const formatContent = (content: any): string => {
    // convert content to string
    let str = typeof content === 'string' ? content : String(content);
    
    // remove double quotes at the beginning and end
    str = str.replace(/^"|"$/g, '');
    
    // add two spaces at the end of \n and \]n\n
    str = str.replace(/\\n/g, '  \n  ').replace(/\\]n\\n/g, '  \]n\n  ');
    
    return str;
  };


  const handleButtonClick = (buttonText: string) => () => {
    setInputMessage(buttonText);
    inputRef.current?.focus();
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newValue = e.target.value;
    setInputMessage(newValue);
    
    // check if the input contains a youtube video link
    const youtubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
    const match = newValue.match(youtubeRegex);
    
    if (match) {
      const videoId = match[1];
      setVideoUrl(`https://www.youtube.com/embed/${videoId}`);
    } else {
      setVideoUrl(null);
    }
  };

  const renderMessage = (msg: Message, index: number) => {
    const youtubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
    const match = msg.content.match(youtubeRegex);
    const videoId = match ? match[1] : null;

    return (
      <React.Fragment key={index}>
        <ChatMessage
          isAI={msg.role === 'assistant'}
          avatarFallback={msg.role === 'assistant' ? "AI" : "U"}
          message={
            <Markdown remarkPlugins={[remarkGfm]} className="line-break">
              {formatContent(msg.content)}
            </Markdown>
          }
          imageUrl={msg.imageUrl}
        />
        {videoId && (
          <div className="mt-2 mb-4">
            <iframe
              width="100%"
              height="315"
              src={`https://www.youtube.com/embed/${videoId}`}
              title="YouTube video player"
              frameBorder="0"
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
              allowFullScreen
            ></iframe>
          </div>
        )}
      </React.Fragment>
    );
  };

  return (
    <div className="flex min-h-screen w-full bg-gray-100">
      {/* Top bar for mobile devices */}
      <div className="md:hidden fixed top-0 left-0 right-0 bg-white border-b border-gray-300 p-4 z-10">
        <button onClick={toggleSidebar} className="text-gray-500 hover:text-gray-700">
          <MenuIcon className="w-6 h-6" />
        </button>
      </div>

      {/* Floating sidebar */}
      {isSidebarOpen && (
        <div className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-20" onClick={toggleSidebar}>
          <div className="w-64 h-full bg-white p-4 overflow-y-auto" onClick={(e) => e.stopPropagation()}>
            <h1 className="text-xl font-bold text-gray-500">Suno Song Generator</h1>
            {/* Add more sidebar content here */}
          </div>
        </div>
      )}

      {/* Desktop sidebar */}
      <div className="hidden md:block w-100 bg-white border-r border-gray-300 p-6 flex-shrink-0">
        <h1 className="text-xl font-bold text-gray-500">Suno Song Generator</h1>
        <p className="text-sm text-gray-500">Generate your favorite songs through chat.</p>


        <div className="space-y-4 mt-4">
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("I want to generate lyrics about XX")}
            >
              I want to generate lyrics about XX
            </Button>
          </div>
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("Generate corresponding song style list")}
            >
              Generate corresponding song style list
            </Button>
          </div>
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("Based on the song and my ideas, give me a Suno Style List")}
            >
              Based on the song and my ideas, give me a Suno Style List
            </Button>
          </div>
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("Generate a song lyrics")}
            >
              Generate a song lyrics
            </Button>
          </div>
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("Generate song using Suno API based on these lyrics")}
            >
              Generate song using Suno API based on these lyrics
            </Button>
          </div>
          <div>
            <Button 
              variant="outline" 
              onClick={handleButtonClick("Current Suno Credit balance")}
            >
              Current Suno Credit balance
            </Button>
          </div>
        </div>



      </div>

      {/* Main chat area */}
      <div className="flex-1 flex justify-center p-4 md:p-4 mt-14 md:mt-0">
        <div className="w-full max-w-[800px] flex flex-col bg-white border border-gray-400 rounded-lg overflow-hidden">
          <div className="flex-1 overflow-auto p-4 space-y-4">
            {/* 消息列表 */}
            {messages.map((msg, index) => renderMessage(msg, index))}
            {isThinking && (
              <ChatMessage
                isAI={true}
                avatarFallback="AI"
                message={<span className="thinking">Thinking...</span>}
              />
            )}
            <div ref={messagesEndRef} />
          </div>
          
          {/* 輸入區域 */}
          <div className="border-t p-2">
            <ChatInput
              inputMessage={inputMessage}
              setInputMessage={setInputMessage}
              handleSendMessage={handleSendMessage}
              handleRemoveImage={handleRemoveImage}
              AttachmentIcon={AttachmentIcon}
              CloseIcon={CloseIcon}
              handleKeyDown={handleKeyDown}
              imageUrl={imageUrl}
              handleFileAttachment={handleFileAttachment}
              inputRef={inputRef}
              handleInputChange={handleInputChange}
            />
          </div>
          
          {reminderMessage && (
            <div className="mt-2 text-sm text-red-500 px-2">
              {reminderMessage}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
